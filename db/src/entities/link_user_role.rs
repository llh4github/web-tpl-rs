//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa::ToSchema,
)]
#[sea_orm(table_name = "link_user_role")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub role_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::auth_role::Entity",
        from = "Column::RoleId",
        to = "super::auth_role::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    AuthRole,
    #[sea_orm(
        belongs_to = "super::auth_user::Entity",
        from = "Column::UserId",
        to = "super::auth_user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    AuthUser,
}

impl Related<super::auth_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthRole.def()
    }
}

impl Related<super::auth_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthUser.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
